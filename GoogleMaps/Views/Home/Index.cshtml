@model GoogleMaps.Models.Address
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Google Maps</h2>
<script type="text/javascript">
    //Creating objects to be used for searching
    var address = 'USA';
    var markers = [];
    var map;
    var geocoder = new google.maps.Geocoder();
    var homeLatLng = "";
    var markerNumberIndex = 1;


    //Initializing google maps
    function initialize() {
        var mapOptions = {
            zoom: 3,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        //New map instance
        map = new google.maps.Map(document.getElementById('googleMap'),
                mapOptions);
        geocoder.geocode({
            'address': address
        },
        function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
            }
        });
    }
    //Searching for directions to Marietta, GA
    function addMarkerToMap() {
        var searchAddress = $("#Street1").val() + " " + $("#Street2").val() + " " + $("#City").val() + " " + $("#States").val() + " " + $("#Zip").val();
        addMarker(searchAddress);
    }
    function addMarker(address) {
        $.getJSON('http://maps.googleapis.com/maps/api/geocode/json?address=' + address + '&libraries=geometry', null, function (data) {
            var p = data.results[0].geometry.location;
            var latlng = new google.maps.LatLng(p.lat, p.lng);
            var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=" + markerNumberIndex + "|FE6256|000000",
                draggable: false,
                animation: google.maps.Animation.DROP
            });
            //Add Marker to map
            markers.push(marker);
            //Recentering map on pointer on pan out
            google.maps.event.addListener(marker, 'click', function () {
                window.setTimeout(function () {
                    map.panTo(marker.getPosition());
                }, 2000);
            })
            //Adding click event to marker to zoom in
            marker.addListener('click', function () {
                map.setZoom(13);
                map.setCenter(marker.getPosition());
            });
            //Popup Window to display address information
            var infowindow = new google.maps.InfoWindow({
                content: address
            });
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
            markerNumberIndex++;
        });

    }
    //calculate distance between two points
    function calcDistance(p1, p2) {
        var proximitymeter = google.maps.geometry.spherical.computeDistanceBetween(p1, p2).toFixed(1);
        var proximitymiles = proximitymeter * 0.000621371192;
        proximitymiles = Math.ceil(proximitymiles);
        return (proximitymiles);
    }
    //Reset stored values
    function resetValues() {
        markers = [];
        markerNumberIndex = 1;
    }
    //Clear markers from map
    function clearMarkers() {
        setMapOnAll(null);
        resetValues();
    }
    // Sets the map on all markers in the array.
    function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }
    google.maps.event.addDomListener(window, 'load', initialize);
</script>
<!--Start Address search fields-->
<div class="panel-body">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary()
        <div class="form-group">
            <label>
                Street Line 1:
            </label>
            @Html.TextBoxFor(x => x.Street1, new { @class = "form-control" })

        </div>
        <div class="form-group">
            <label>
                Street Line 2:
            </label>
            @Html.TextBoxFor(x => x.Street2, new { @class = "form-control" })

        </div>
        <div class="form-group">
            <label>City: </label>@Html.TextBoxFor(x => x.City, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label>
                State:
            </label>
            @Html.DropDownList("States", ViewData["states"] as List<SelectListItem>, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label>Zip:</label> @Html.TextBoxFor(x => x.Zip, new { @class = "form-control" })
        </div>
        <div>
            <input class="btn btn-success" type="button" value="Add Markers" id="markerAdd" onclick="addMarkerToMap()" />
            <input class="btn btn-danger" type="button" value="Clear Markers" id="markerClear" onclick="clearMarkers()" />
        </div>
    }
</div>
<!--Google map-->
<div id="googleMap" class="col-lg-12" style="height:400px;">

</div>
<footer class="text-center">
    <div class="footer-below">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    Copyright &copy; <a href="http://varonfelder.bitbucket.org">varonfelder.bitbucket.org</a> 2016
                </div>
            </div>
        </div>
    </div>
</footer>